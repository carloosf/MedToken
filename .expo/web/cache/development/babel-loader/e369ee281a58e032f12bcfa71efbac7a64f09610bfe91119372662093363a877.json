{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { useFonts, Oswald_400Regular } from '@expo-google-fonts/oswald';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function LoadingScreen(_ref) {\n  var onPress = _ref.onPress,\n    _ref$isLoading = _ref.isLoading,\n    isLoading = _ref$isLoading === void 0 ? false : _ref$isLoading;\n  var _useFonts = useFonts({\n      Oswald_400Regular: Oswald_400Regular\n    }),\n    _useFonts2 = _slicedToArray(_useFonts, 1),\n    fontLoaded = _useFonts2[0];\n  if (!fontLoaded) {\n    return null;\n  } else {\n    return _jsx(TouchableOpacity, {\n      disabled: isLoading,\n      onPress: onPress,\n      style: styles.btnStyle,\n      children: isLoading ? _jsx(ActivityIndicator, {\n        color: \"#4F4343\"\n      }) : _jsx(Text, {\n        style: styles.textBtn,\n        children: \"Solicitar Token\"\n      })\n    });\n  }\n}\nvar styles = StyleSheet.create({\n  btnStyle: {\n    backgroundColor: '#fff',\n    padding: 16,\n    width: 200,\n    alignContent: 'center',\n    justifyContent: 'center',\n    borderRadius: 15,\n    position: 'relative',\n    bottom: '25%'\n  },\n  textBtn: {\n    color: '#4F4343',\n    fontSize: 15,\n    fontWeight: 'bold',\n    textAlign: 'center',\n    fontFamily: 'Oswald_400Regular'\n  }\n});","map":{"version":3,"names":["React","Text","StyleSheet","TouchableOpacity","ActivityIndicator","useFonts","Oswald_400Regular","jsx","_jsx","LoadingScreen","_ref","onPress","_ref$isLoading","isLoading","_useFonts","_useFonts2","_slicedToArray","fontLoaded","disabled","style","styles","btnStyle","children","color","textBtn","create","backgroundColor","padding","width","alignContent","justifyContent","borderRadius","position","bottom","fontSize","fontWeight","textAlign","fontFamily"],"sources":["D:/Github/MedToken/front/src/components/Button.tsx"],"sourcesContent":["/* eslint-disable camelcase */\r\nimport React from 'react'\r\nimport {\r\n  Text,\r\n  StyleSheet,\r\n  TouchableOpacity,\r\n  ActivityIndicator,\r\n} from 'react-native'\r\nimport { useFonts, Oswald_400Regular } from '@expo-google-fonts/oswald'\r\n\r\ninterface ButtonProps {\r\n  onPress: () => void\r\n  isLoading?: boolean\r\n}\r\n\r\nexport default function LoadingScreen({\r\n  onPress,\r\n  isLoading = false,\r\n}: ButtonProps) {\r\n  const [fontLoaded] = useFonts({\r\n    Oswald_400Regular,\r\n  })\r\n  if (!fontLoaded) {\r\n    return null\r\n  } else {\r\n    return (\r\n      <TouchableOpacity\r\n        disabled={isLoading}\r\n        onPress={onPress}\r\n        style={styles.btnStyle}\r\n      >\r\n        {isLoading ? (\r\n          <ActivityIndicator color=\"#4F4343\" />\r\n        ) : (\r\n          <Text style={styles.textBtn}>Solicitar Token</Text>\r\n        )}\r\n      </TouchableOpacity>\r\n    )\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  btnStyle: {\r\n    backgroundColor: '#fff',\r\n    padding: 16,\r\n    width: 200,\r\n    alignContent: 'center',\r\n    justifyContent: 'center',\r\n    borderRadius: 15,\r\n    position: 'relative',\r\n    bottom: '25%',\r\n  },\r\n  textBtn: {\r\n    color: '#4F4343',\r\n    fontSize: 15,\r\n    fontWeight: 'bold',\r\n    textAlign: 'center',\r\n    fontFamily: 'Oswald_400Regular',\r\n  },\r\n})\r\n"],"mappings":";AACA,OAAOA,KAAK,MAAM,OAAO;AAAA,OAAAC,IAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,gBAAA;AAAA,OAAAC,iBAAA;AAOzB,SAASC,QAAQ,EAAEC,iBAAiB,QAAQ,2BAA2B;AAAA,SAAAC,GAAA,IAAAC,IAAA;AAOvE,eAAe,SAASC,aAAaA,CAAAC,IAAA,EAGrB;EAAA,IAFdC,OAAO,GAAAD,IAAA,CAAPC,OAAO;IAAAC,cAAA,GAAAF,IAAA,CACPG,SAAS;IAATA,SAAS,GAAAD,cAAA,cAAG,KAAK,GAAAA,cAAA;EAEjB,IAAAE,SAAA,GAAqBT,QAAQ,CAAC;MAC5BC,iBAAiB,EAAjBA;IACF,CAAC,CAAC;IAAAS,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAFKG,UAAU,GAAAF,UAAA;EAGjB,IAAI,CAACE,UAAU,EAAE;IACf,OAAO,IAAI;EACb,CAAC,MAAM;IACL,OACET,IAAA,CAACL,gBAAgB;MACfe,QAAQ,EAAEL,SAAU;MACpBF,OAAO,EAAEA,OAAQ;MACjBQ,KAAK,EAAEC,MAAM,CAACC,QAAS;MAAAC,QAAA,EAEtBT,SAAS,GACRL,IAAA,CAACJ,iBAAiB;QAACmB,KAAK,EAAC;MAAS,CAAE,CAAC,GAErCf,IAAA,CAACP,IAAI;QAACkB,KAAK,EAAEC,MAAM,CAACI,OAAQ;QAAAF,QAAA,EAAC;MAAe,CAAM;IACnD,CACe,CAAC;EAEvB;AACF;AAEA,IAAMF,MAAM,GAAGlB,UAAU,CAACuB,MAAM,CAAC;EAC/BJ,QAAQ,EAAE;IACRK,eAAe,EAAE,MAAM;IACvBC,OAAO,EAAE,EAAE;IACXC,KAAK,EAAE,GAAG;IACVC,YAAY,EAAE,QAAQ;IACtBC,cAAc,EAAE,QAAQ;IACxBC,YAAY,EAAE,EAAE;IAChBC,QAAQ,EAAE,UAAU;IACpBC,MAAM,EAAE;EACV,CAAC;EACDT,OAAO,EAAE;IACPD,KAAK,EAAE,SAAS;IAChBW,QAAQ,EAAE,EAAE;IACZC,UAAU,EAAE,MAAM;IAClBC,SAAS,EAAE,QAAQ;IACnBC,UAAU,EAAE;EACd;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}