{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState, useEffect } from 'react';\nimport Data from \"./dataAtual\";\nimport HandlerToken from \"./handlerToken\";\nexport default function AddToken(_ref) {\n  var dados = _ref.dados;\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    status = _useState2[0],\n    setStatus = _useState2[1];\n  useEffect(function () {\n    var fetchData = function () {\n      var _ref2 = _asyncToGenerator(function* () {\n        try {\n          var response = yield fetch('https://medtoken-api.onrender.com/', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              token: HandlerToken(dados.tipoToken),\n              name: dados.nome,\n              date: Data(true),\n              prioridade: dados.tipoToken\n            })\n          });\n          var data = yield response.json();\n          console.log('Response:', data.token);\n          setStatus(data.status);\n        } catch (error) {\n          console.error('Error:', error);\n        }\n      });\n      return function fetchData() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    fetchData();\n  }, [dados.nome, dados.tipoToken]);\n  return {\n    status: status\n  };\n}","map":{"version":3,"names":["useState","useEffect","Data","HandlerToken","AddToken","_ref","dados","_useState","_useState2","_slicedToArray","status","setStatus","fetchData","_ref2","_asyncToGenerator","response","fetch","method","headers","body","JSON","stringify","token","tipoToken","name","nome","date","prioridade","data","json","console","log","error","apply","arguments"],"sources":["D:/Github/MedToken/src/handlers/AddToken.tsx"],"sourcesContent":["import { useState, useEffect } from 'react'\r\nimport Data from './dataAtual'\r\nimport HandlerToken from './handlerToken'\r\nexport default function AddToken({ dados }) {\r\n  const [status, setStatus] = useState('')\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch('https://medtoken-api.onrender.com/', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({\r\n            token: HandlerToken(dados.tipoToken),\r\n            name: dados.nome,\r\n            date: Data(true),\r\n            prioridade: dados.tipoToken,\r\n          }),\r\n        })\r\n        const data = await response.json()\r\n        console.log('Response:', data.token)\r\n        setStatus(data.status)\r\n      } catch (error) {\r\n        console.error('Error:', error)\r\n      }\r\n    }\r\n\r\n    fetchData()\r\n  }, [dados.nome, dados.tipoToken])\r\n\r\n  return { status }\r\n}\r\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,IAAI;AACX,OAAOC,YAAY;AACnB,eAAe,SAASC,QAAQA,CAAAC,IAAA,EAAY;EAAA,IAATC,KAAK,GAAAD,IAAA,CAALC,KAAK;EACtC,IAAAC,SAAA,GAA4BP,QAAQ,CAAC,EAAE,CAAC;IAAAQ,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAjCG,MAAM,GAAAF,UAAA;IAAEG,SAAS,GAAAH,UAAA;EAExBP,SAAS,CAAC,YAAM;IACd,IAAMW,SAAS;MAAA,IAAAC,KAAA,GAAAC,iBAAA,CAAG,aAAY;QAC5B,IAAI;UACF,IAAMC,QAAQ,SAASC,KAAK,CAAC,oCAAoC,EAAE;YACjEC,MAAM,EAAE,MAAM;YACdC,OAAO,EAAE;cACP,cAAc,EAAE;YAClB,CAAC;YACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;cACnBC,KAAK,EAAEnB,YAAY,CAACG,KAAK,CAACiB,SAAS,CAAC;cACpCC,IAAI,EAAElB,KAAK,CAACmB,IAAI;cAChBC,IAAI,EAAExB,IAAI,CAAC,IAAI,CAAC;cAChByB,UAAU,EAAErB,KAAK,CAACiB;YACpB,CAAC;UACH,CAAC,CAAC;UACF,IAAMK,IAAI,SAASb,QAAQ,CAACc,IAAI,CAAC,CAAC;UAClCC,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEH,IAAI,CAACN,KAAK,CAAC;UACpCX,SAAS,CAACiB,IAAI,CAAClB,MAAM,CAAC;QACxB,CAAC,CAAC,OAAOsB,KAAK,EAAE;UACdF,OAAO,CAACE,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;QAChC;MACF,CAAC;MAAA,gBApBKpB,SAASA,CAAA;QAAA,OAAAC,KAAA,CAAAoB,KAAA,OAAAC,SAAA;MAAA;IAAA,GAoBd;IAEDtB,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACN,KAAK,CAACmB,IAAI,EAAEnB,KAAK,CAACiB,SAAS,CAAC,CAAC;EAEjC,OAAO;IAAEb,MAAM,EAANA;EAAO,CAAC;AACnB"},"metadata":{},"sourceType":"module","externalDependencies":[]}